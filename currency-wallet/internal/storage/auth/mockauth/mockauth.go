// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/auth/storage.go

// Package mockauth is a generated GoMock package.
package mockauth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kossadda/wallet-exchanger/currency-wallet/internal/model"
)

// MockMainAPI is a mock of MainAPI interface.
type MockMainAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMainAPIMockRecorder
}

// MockMainAPIMockRecorder is the mock recorder for MockMainAPI.
type MockMainAPIMockRecorder struct {
	mock *MockMainAPI
}

// NewMockMainAPI creates a new mock instance.
func NewMockMainAPI(ctrl *gomock.Controller) *MockMainAPI {
	mock := &MockMainAPI{ctrl: ctrl}
	mock.recorder = &MockMainAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainAPI) EXPECT() *MockMainAPIMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockMainAPI) CreateUser(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMainAPIMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMainAPI)(nil).CreateUser), user)
}

// GetUser mocks base method.
func (m *MockMainAPI) GetUser(username, password string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockMainAPIMockRecorder) GetUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockMainAPI)(nil).GetUser), username, password)
}
