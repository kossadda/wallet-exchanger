// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/wallet/storage.go

// Package mockwallet is a generated GoMock package.
package mockwallet

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kossadda/wallet-exchanger/currency-wallet/internal/model"
)

// MockMainAPI is a mock of MainAPI interface.
type MockMainAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMainAPIMockRecorder
}

// MockMainAPIMockRecorder is the mock recorder for MockMainAPI.
type MockMainAPIMockRecorder struct {
	mock *MockMainAPI
}

// NewMockMainAPI creates a new mock instance.
func NewMockMainAPI(ctrl *gomock.Controller) *MockMainAPI {
	mock := &MockMainAPI{ctrl: ctrl}
	mock.recorder = &MockMainAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainAPI) EXPECT() *MockMainAPIMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockMainAPI) Deposit(dep *model.Operation) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", dep)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockMainAPIMockRecorder) Deposit(dep interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockMainAPI)(nil).Deposit), dep)
}

// GetBalance mocks base method.
func (m *MockMainAPI) GetBalance(userId int) (*model.Currency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", userId)
	ret0, _ := ret[0].(*model.Currency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockMainAPIMockRecorder) GetBalance(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockMainAPI)(nil).GetBalance), userId)
}

// Withdraw mocks base method.
func (m *MockMainAPI) Withdraw(with *model.Operation) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", with)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockMainAPIMockRecorder) Withdraw(with interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockMainAPI)(nil).Withdraw), with)
}
